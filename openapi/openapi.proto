syntax = "proto2";

package openapi;
option go_package = "github.com/mikros-dev/protoc-gen-openapi/openapi;openapi";

import "google/protobuf/descriptor.proto";

extend google.protobuf.FileOptions {
  optional OpenapiMetadata metadata = 86041;
}

message OpenapiMetadata {
  optional OpenapiInfo info = 1;
  repeated OpenapiServer server = 2;
}

message OpenapiInfo {
  required string title = 1;
  optional string description = 2;
  required string version = 3;
}

message OpenapiServer {
  required string url = 1;
  optional string description = 2;
}

extend google.protobuf.ServiceOptions {
  repeated OpenapiServiceSecurity security = 86041;
}

message OpenapiServiceSecurity {
  required OpenapiSecurityType type = 1;
  optional string description = 2;
  required string name = 3;
  optional OpenapiSecurityApiKeyLocation in = 4;
  required OpenapiSecurityScheme scheme = 5;
  optional string bearer_format = 6;
  optional OpenapiSecurityOauthFlows flows = 7;
  optional string open_id_connect_url = 8;
}

message OpenapiSecurityOauthFlows {
  optional OpenapiSecurityOauthFlow implicit = 1;
  optional OpenapiSecurityOauthFlow password = 2;
  optional OpenapiSecurityOauthFlow client_credentials = 3;
  optional OpenapiSecurityOauthFlow authorization_code = 4;
}

message OpenapiSecurityOauthFlow {
  required string authorization_url = 1;
  required string token_url = 2;
  optional string refresh_url = 3;
  map<string, string> scopes = 4;
}

enum OpenapiSecurityType {
  OPENAPI_SECURITY_TYPE_UNSPECIFIED = 0;
  OPENAPI_SECURITY_TYPE_API_KEY = 1;
  OPENAPI_SECURITY_TYPE_HTTP = 2;
  OPENAPI_SECURITY_TYPE_OAUTH2 = 3;
  OPENAPI_SECURITY_TYPE_OPEN_ID_CONNECT = 4;
}

enum OpenapiSecurityApiKeyLocation {
  OPENAPI_SECURITY_API_KEY_LOCATION_UNSPECIFIED = 0;
  OPENAPI_SECURITY_API_KEY_LOCATION_QUERY = 1;
  OPENAPI_SECURITY_API_KEY_LOCATION_HEADER = 2;
  OPENAPI_SECURITY_API_KEY_LOCATION_COOKIE = 3;
}

enum OpenapiSecurityScheme {
  OPENAPI_SECURITY_SCHEME_UNSPECIFIED = 0;
  OPENAPI_SECURITY_SCHEME_BASIC = 1;
  OPENAPI_SECURITY_SCHEME_BEARER = 2;
  OPENAPI_SECURITY_SCHEME_OAUTH = 3;
  OPENAPI_SECURITY_SCHEME_DIGEST = 4;
}

// Annotations to be used inside a RPC declaration block.
extend google.protobuf.MethodOptions {
  optional OpenapiMethod operation = 86041;
}

message OpenapiMethod {
  required string summary = 1;
  required string description = 2;
  repeated string tags = 3;
  repeated Response response = 4;
}

message Response {
  required ResponseCode code = 1;
  required string description = 2;
}

// All supported HTTP response codes.
enum ResponseCode {
  RESPONSE_CODE_UNSPECIFIED = 0;

  RESPONSE_CODE_CONTINUE            = 100; // RFC 9110, 15.2.1
  RESPONSE_CODE_SWITCHING_PROTOCOLS = 101; // RFC 9110, 15.2.2
  RESPONSE_CODE_PROCESSING          = 102; // RFC 2518, 10.1
  RESPONSE_CODE_EARLY_HINTS         = 103; // RFC 8297

  RESPONSE_CODE_OK                      = 200; // RFC 9110, 15.3.1
  RESPONSE_CODE_CREATED                 = 201; // RFC 9110, 15.3.2
  RESPONSE_CODE_ACCEPTED                = 202; // RFC 9110, 15.3.3
  RESPONSE_CODE_NON_AUTHORITATIVE_INFO  = 203; // RFC 9110, 15.3.4
  RESPONSE_CODE_NO_CONTENT              = 204; // RFC 9110, 15.3.5
  RESPONSE_CODE_RESET_CONTENT           = 205; // RFC 9110, 15.3.6
  RESPONSE_CODE_PARTIAL_CONTENT         = 206; // RFC 9110, 15.3.7
  RESPONSE_CODE_MULTI_STATUS            = 207; // RFC 4918, 11.1
  RESPONSE_CODE_ALREADY_REPORTED        = 208; // RFC 5842, 7.1
  RESPONSE_CODE_IM_USED                 = 226; // RFC 3229, 10.4.1

  RESPONSE_CODE_MULTIPLE_CHOICES  = 300; // RFC 9110, 15.4.1
  RESPONSE_CODE_MOVED_PERMANENTLY = 301; // RFC 9110, 15.4.2
  RESPONSE_CODE_FOUND             = 302; // RFC 9110, 15.4.3
  RESPONSE_CODE_SEE_OTHER         = 303; // RFC 9110, 15.4.4
  RESPONSE_CODE_NOT_MODIFIED      = 304; // RFC 9110, 15.4.5
  RESPONSE_CODE_USE_PROXY         = 305; // RFC 9110, 15.4.6

  RESPONSE_CODE_TEMPORARY_REDIRECT = 307; // RFC 9110, 15.4.8
  RESPONSE_CODE_PERMANENT_REDIRECT = 308; // RFC 9110, 15.4.9

  RESPONSE_CODE_BAD_REQUEST                     = 400; // RFC 9110, 15.5.1
  RESPONSE_CODE_UNAUTHORIZED                    = 401; // RFC 9110, 15.5.2
  RESPONSE_CODE_PAYMENT_REQUIRED                = 402; // RFC 9110, 15.5.3
  RESPONSE_CODE_FORBIDDEN                       = 403; // RFC 9110, 15.5.4
  RESPONSE_CODE_NOT_FOUND                       = 404; // RFC 9110, 15.5.5
  RESPONSE_CODE_METHOD_NOT_ALLOWED              = 405; // RFC 9110, 15.5.6
  RESPONSE_CODE_NOT_ACCEPTABLE                  = 406; // RFC 9110, 15.5.7
  RESPONSE_CODE_PROXY_AUTH_REQUIRED             = 407; // RFC 9110, 15.5.8
  RESPONSE_CODE_REQUEST_TIMEOUT                 = 408; // RFC 9110, 15.5.9
  RESPONSE_CODE_CONFLICT                        = 409; // RFC 9110, 15.5.10
  RESPONSE_CODE_GONE                            = 410; // RFC 9110, 15.5.11
  RESPONSE_CODE_LENGTH_REQUIRED                 = 411; // RFC 9110, 15.5.12
  RESPONSE_CODE_PRECONDITION_FAILED             = 412; // RFC 9110, 15.5.13
  RESPONSE_CODE_REQUEST_ENTITY_TOO_LARGE        = 413; // RFC 9110, 15.5.14
  RESPONSE_CODE_REQUEST_URI_TOO_LONG            = 414; // RFC 9110, 15.5.15
  RESPONSE_CODE_UNSUPPORTED_MEDIA_TYPE          = 415; // RFC 9110, 15.5.16
  RESPONSE_CODE_REQUESTED_RANGE_NOT_SATISFIABLE = 416; // RFC 9110, 15.5.17
  RESPONSE_CODE_EXPECTATION_FAILED              = 417; // RFC 9110, 15.5.18
  RESPONSE_CODE_TEAPOT                          = 418; // RFC 9110, 15.5.19 (UNUSED)
  RESPONSE_CODE_MISDIRECTED_REQUEST             = 421; // RFC 9110, 15.5.20
  RESPONSE_CODE_UNPROCESSABLE_ENTITY            = 422; // RFC 9110, 15.5.21
  RESPONSE_CODE_LOCKED                          = 423; // RFC 4918, 11.3
  RESPONSE_CODE_FAILED_DEPENDENCY               = 424; // RFC 4918, 11.4
  RESPONSE_CODE_TOO_EARLY                       = 425; // RFC 8470, 5.2.
  RESPONSE_CODE_UPGRADE_REQUIRED                = 426; // RFC 9110, 15.5.22
  RESPONSE_CODE_PRECONDITION_REQUIRED           = 428; // RFC 6585, 3
  RESPONSE_CODE_TOO_MANY_REQUESTS               = 429; // RFC 6585, 4
  RESPONSE_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE = 431; // RFC 6585, 5
  RESPONSE_CODE_UNAVAILABLE_FOR_LEGAL_REASONS   = 451; // RFC 7725, 3

  RESPONSE_CODE_INTERNAL_SERVER_ERROR           = 500; // RFC 9110, 15.6.1
  RESPONSE_CODE_NOT_IMPLEMENTED                 = 501; // RFC 9110, 15.6.2
  RESPONSE_CODE_BAD_GATEWAY                     = 502; // RFC 9110, 15.6.3
  RESPONSE_CODE_SERVICE_UNAVAILABLE             = 503; // RFC 9110, 15.6.4
  RESPONSE_CODE_GATEWAY_TIMEOUT                 = 504; // RFC 9110, 15.6.5
  RESPONSE_CODE_HTTP_VERSION_NOT_SUPPORTED      = 505; // RFC 9110, 15.6.6
  RESPONSE_CODE_VARIANT_ALSO_NEGOTIATES         = 506; // RFC 2295, 8.1
  RESPONSE_CODE_INSUFFICIENT_STORAGE            = 507; // RFC 4918, 11.5
  RESPONSE_CODE_LOOP_DETECTED                   = 508; // RFC 5842, 7.2
  RESPONSE_CODE_NOT_EXTENDED                    = 510; // RFC 2774, 7
  RESPONSE_CODE_NETWORK_AUTHENTICATION_REQUIRED = 511; // RFC 6585, 6
}

// Annotations to be used inside a message declaration block.
extend google.protobuf.MessageOptions {
  optional OpenapiMessage message = 86041;
}

message OpenapiMessage {
  required Operation operation = 1;
}

message Operation {
  required RequestBody request_body = 1;
}

message RequestBody {
  required string description = 1;
}

// Annotations to be used at a message member (field) declaration.
extend google.protobuf.FieldOptions {
  optional Property property = 86041;
}

message Property {
  optional string description = 1;
  optional string example = 2;
  optional PropertyFormat format = 3;
  optional bool required = 4;
  optional PropertyLocation location = 5;
}

// Supported formats of a property.
enum PropertyFormat {
  PROPERTY_FORMAT_UNSPECIFIED = 0;
  PROPERTY_FORMAT_INT32 = 1;
  PROPERTY_FORMAT_INT64 = 2;
  PROPERTY_FORMAT_FLOAT = 3;
  PROPERTY_FORMAT_DOUBLE = 4;
  PROPERTY_FORMAT_BYTE = 5;
  PROPERTY_FORMAT_BINARY = 6;
  PROPERTY_FORMAT_DATE = 7;
  PROPERTY_FORMAT_DATE_TIME = 8;
  PROPERTY_FORMAT_PASSWORD = 9;
  PROPERTY_FORMAT_STRING = 10;
}

enum PropertyLocation {
  PROPERTY_LOCATION_UNSPECIFIED = 0;
  PROPERTY_LOCATION_BODY = 1;
  PROPERTY_LOCATION_QUERY = 2;
  PROPERTY_LOCATION_PATH = 3;
  PROPERTY_LOCATION_HEADER = 4;
}