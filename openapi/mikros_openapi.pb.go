// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v5.27.3
// source: openapi/mikros_openapi.proto

package mikros_openapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpenapiSecurityType int32

const (
	OpenapiSecurityType_OPENAPI_SECURITY_TYPE_UNSPECIFIED     OpenapiSecurityType = 0
	OpenapiSecurityType_OPENAPI_SECURITY_TYPE_API_KEY         OpenapiSecurityType = 1
	OpenapiSecurityType_OPENAPI_SECURITY_TYPE_HTTP            OpenapiSecurityType = 2
	OpenapiSecurityType_OPENAPI_SECURITY_TYPE_OAUTH2          OpenapiSecurityType = 3
	OpenapiSecurityType_OPENAPI_SECURITY_TYPE_OPEN_ID_CONNECT OpenapiSecurityType = 4
)

// Enum value maps for OpenapiSecurityType.
var (
	OpenapiSecurityType_name = map[int32]string{
		0: "OPENAPI_SECURITY_TYPE_UNSPECIFIED",
		1: "OPENAPI_SECURITY_TYPE_API_KEY",
		2: "OPENAPI_SECURITY_TYPE_HTTP",
		3: "OPENAPI_SECURITY_TYPE_OAUTH2",
		4: "OPENAPI_SECURITY_TYPE_OPEN_ID_CONNECT",
	}
	OpenapiSecurityType_value = map[string]int32{
		"OPENAPI_SECURITY_TYPE_UNSPECIFIED":     0,
		"OPENAPI_SECURITY_TYPE_API_KEY":         1,
		"OPENAPI_SECURITY_TYPE_HTTP":            2,
		"OPENAPI_SECURITY_TYPE_OAUTH2":          3,
		"OPENAPI_SECURITY_TYPE_OPEN_ID_CONNECT": 4,
	}
)

func (x OpenapiSecurityType) Enum() *OpenapiSecurityType {
	p := new(OpenapiSecurityType)
	*p = x
	return p
}

func (x OpenapiSecurityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenapiSecurityType) Descriptor() protoreflect.EnumDescriptor {
	return file_openapi_mikros_openapi_proto_enumTypes[0].Descriptor()
}

func (OpenapiSecurityType) Type() protoreflect.EnumType {
	return &file_openapi_mikros_openapi_proto_enumTypes[0]
}

func (x OpenapiSecurityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenapiSecurityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenapiSecurityType(num)
	return nil
}

// Deprecated: Use OpenapiSecurityType.Descriptor instead.
func (OpenapiSecurityType) EnumDescriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{0}
}

type OpenapiSecurityApiKeyLocation int32

const (
	OpenapiSecurityApiKeyLocation_OPENAPI_SECURITY_API_KEY_LOCATION_UNSPECIFIED OpenapiSecurityApiKeyLocation = 0
	OpenapiSecurityApiKeyLocation_OPENAPI_SECURITY_API_KEY_LOCATION_QUERY       OpenapiSecurityApiKeyLocation = 1
	OpenapiSecurityApiKeyLocation_OPENAPI_SECURITY_API_KEY_LOCATION_HEADER      OpenapiSecurityApiKeyLocation = 2
	OpenapiSecurityApiKeyLocation_OPENAPI_SECURITY_API_KEY_LOCATION_COOKIE      OpenapiSecurityApiKeyLocation = 3
)

// Enum value maps for OpenapiSecurityApiKeyLocation.
var (
	OpenapiSecurityApiKeyLocation_name = map[int32]string{
		0: "OPENAPI_SECURITY_API_KEY_LOCATION_UNSPECIFIED",
		1: "OPENAPI_SECURITY_API_KEY_LOCATION_QUERY",
		2: "OPENAPI_SECURITY_API_KEY_LOCATION_HEADER",
		3: "OPENAPI_SECURITY_API_KEY_LOCATION_COOKIE",
	}
	OpenapiSecurityApiKeyLocation_value = map[string]int32{
		"OPENAPI_SECURITY_API_KEY_LOCATION_UNSPECIFIED": 0,
		"OPENAPI_SECURITY_API_KEY_LOCATION_QUERY":       1,
		"OPENAPI_SECURITY_API_KEY_LOCATION_HEADER":      2,
		"OPENAPI_SECURITY_API_KEY_LOCATION_COOKIE":      3,
	}
)

func (x OpenapiSecurityApiKeyLocation) Enum() *OpenapiSecurityApiKeyLocation {
	p := new(OpenapiSecurityApiKeyLocation)
	*p = x
	return p
}

func (x OpenapiSecurityApiKeyLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenapiSecurityApiKeyLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_openapi_mikros_openapi_proto_enumTypes[1].Descriptor()
}

func (OpenapiSecurityApiKeyLocation) Type() protoreflect.EnumType {
	return &file_openapi_mikros_openapi_proto_enumTypes[1]
}

func (x OpenapiSecurityApiKeyLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenapiSecurityApiKeyLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenapiSecurityApiKeyLocation(num)
	return nil
}

// Deprecated: Use OpenapiSecurityApiKeyLocation.Descriptor instead.
func (OpenapiSecurityApiKeyLocation) EnumDescriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{1}
}

type OpenapiSecurityScheme int32

const (
	OpenapiSecurityScheme_OPENAPI_SECURITY_SCHEME_UNSPECIFIED OpenapiSecurityScheme = 0
	OpenapiSecurityScheme_OPENAPI_SECURITY_SCHEME_BASIC       OpenapiSecurityScheme = 1
	OpenapiSecurityScheme_OPENAPI_SECURITY_SCHEME_BEARER      OpenapiSecurityScheme = 2
	OpenapiSecurityScheme_OPENAPI_SECURITY_SCHEME_OAUTH       OpenapiSecurityScheme = 3
	OpenapiSecurityScheme_OPENAPI_SECURITY_SCHEME_DIGEST      OpenapiSecurityScheme = 4
)

// Enum value maps for OpenapiSecurityScheme.
var (
	OpenapiSecurityScheme_name = map[int32]string{
		0: "OPENAPI_SECURITY_SCHEME_UNSPECIFIED",
		1: "OPENAPI_SECURITY_SCHEME_BASIC",
		2: "OPENAPI_SECURITY_SCHEME_BEARER",
		3: "OPENAPI_SECURITY_SCHEME_OAUTH",
		4: "OPENAPI_SECURITY_SCHEME_DIGEST",
	}
	OpenapiSecurityScheme_value = map[string]int32{
		"OPENAPI_SECURITY_SCHEME_UNSPECIFIED": 0,
		"OPENAPI_SECURITY_SCHEME_BASIC":       1,
		"OPENAPI_SECURITY_SCHEME_BEARER":      2,
		"OPENAPI_SECURITY_SCHEME_OAUTH":       3,
		"OPENAPI_SECURITY_SCHEME_DIGEST":      4,
	}
)

func (x OpenapiSecurityScheme) Enum() *OpenapiSecurityScheme {
	p := new(OpenapiSecurityScheme)
	*p = x
	return p
}

func (x OpenapiSecurityScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenapiSecurityScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_openapi_mikros_openapi_proto_enumTypes[2].Descriptor()
}

func (OpenapiSecurityScheme) Type() protoreflect.EnumType {
	return &file_openapi_mikros_openapi_proto_enumTypes[2]
}

func (x OpenapiSecurityScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenapiSecurityScheme) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenapiSecurityScheme(num)
	return nil
}

// Deprecated: Use OpenapiSecurityScheme.Descriptor instead.
func (OpenapiSecurityScheme) EnumDescriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{2}
}

// All supported HTTP response codes.
type ResponseCode int32

const (
	ResponseCode_RESPONSE_CODE_UNSPECIFIED                     ResponseCode = 0
	ResponseCode_RESPONSE_CODE_CONTINUE                        ResponseCode = 100 // RFC 9110, 15.2.1
	ResponseCode_RESPONSE_CODE_SWITCHING_PROTOCOLS             ResponseCode = 101 // RFC 9110, 15.2.2
	ResponseCode_RESPONSE_CODE_PROCESSING                      ResponseCode = 102 // RFC 2518, 10.1
	ResponseCode_RESPONSE_CODE_EARLY_HINTS                     ResponseCode = 103 // RFC 8297
	ResponseCode_RESPONSE_CODE_OK                              ResponseCode = 200 // RFC 9110, 15.3.1
	ResponseCode_RESPONSE_CODE_CREATED                         ResponseCode = 201 // RFC 9110, 15.3.2
	ResponseCode_RESPONSE_CODE_ACCEPTED                        ResponseCode = 202 // RFC 9110, 15.3.3
	ResponseCode_RESPONSE_CODE_NON_AUTHORITATIVE_INFO          ResponseCode = 203 // RFC 9110, 15.3.4
	ResponseCode_RESPONSE_CODE_NO_CONTENT                      ResponseCode = 204 // RFC 9110, 15.3.5
	ResponseCode_RESPONSE_CODE_RESET_CONTENT                   ResponseCode = 205 // RFC 9110, 15.3.6
	ResponseCode_RESPONSE_CODE_PARTIAL_CONTENT                 ResponseCode = 206 // RFC 9110, 15.3.7
	ResponseCode_RESPONSE_CODE_MULTI_STATUS                    ResponseCode = 207 // RFC 4918, 11.1
	ResponseCode_RESPONSE_CODE_ALREADY_REPORTED                ResponseCode = 208 // RFC 5842, 7.1
	ResponseCode_RESPONSE_CODE_IM_USED                         ResponseCode = 226 // RFC 3229, 10.4.1
	ResponseCode_RESPONSE_CODE_MULTIPLE_CHOICES                ResponseCode = 300 // RFC 9110, 15.4.1
	ResponseCode_RESPONSE_CODE_MOVED_PERMANENTLY               ResponseCode = 301 // RFC 9110, 15.4.2
	ResponseCode_RESPONSE_CODE_FOUND                           ResponseCode = 302 // RFC 9110, 15.4.3
	ResponseCode_RESPONSE_CODE_SEE_OTHER                       ResponseCode = 303 // RFC 9110, 15.4.4
	ResponseCode_RESPONSE_CODE_NOT_MODIFIED                    ResponseCode = 304 // RFC 9110, 15.4.5
	ResponseCode_RESPONSE_CODE_USE_PROXY                       ResponseCode = 305 // RFC 9110, 15.4.6
	ResponseCode_RESPONSE_CODE_TEMPORARY_REDIRECT              ResponseCode = 307 // RFC 9110, 15.4.8
	ResponseCode_RESPONSE_CODE_PERMANENT_REDIRECT              ResponseCode = 308 // RFC 9110, 15.4.9
	ResponseCode_RESPONSE_CODE_BAD_REQUEST                     ResponseCode = 400 // RFC 9110, 15.5.1
	ResponseCode_RESPONSE_CODE_UNAUTHORIZED                    ResponseCode = 401 // RFC 9110, 15.5.2
	ResponseCode_RESPONSE_CODE_PAYMENT_REQUIRED                ResponseCode = 402 // RFC 9110, 15.5.3
	ResponseCode_RESPONSE_CODE_FORBIDDEN                       ResponseCode = 403 // RFC 9110, 15.5.4
	ResponseCode_RESPONSE_CODE_NOT_FOUND                       ResponseCode = 404 // RFC 9110, 15.5.5
	ResponseCode_RESPONSE_CODE_METHOD_NOT_ALLOWED              ResponseCode = 405 // RFC 9110, 15.5.6
	ResponseCode_RESPONSE_CODE_NOT_ACCEPTABLE                  ResponseCode = 406 // RFC 9110, 15.5.7
	ResponseCode_RESPONSE_CODE_PROXY_AUTH_REQUIRED             ResponseCode = 407 // RFC 9110, 15.5.8
	ResponseCode_RESPONSE_CODE_REQUEST_TIMEOUT                 ResponseCode = 408 // RFC 9110, 15.5.9
	ResponseCode_RESPONSE_CODE_CONFLICT                        ResponseCode = 409 // RFC 9110, 15.5.10
	ResponseCode_RESPONSE_CODE_GONE                            ResponseCode = 410 // RFC 9110, 15.5.11
	ResponseCode_RESPONSE_CODE_LENGTH_REQUIRED                 ResponseCode = 411 // RFC 9110, 15.5.12
	ResponseCode_RESPONSE_CODE_PRECONDITION_FAILED             ResponseCode = 412 // RFC 9110, 15.5.13
	ResponseCode_RESPONSE_CODE_REQUEST_ENTITY_TOO_LARGE        ResponseCode = 413 // RFC 9110, 15.5.14
	ResponseCode_RESPONSE_CODE_REQUEST_URI_TOO_LONG            ResponseCode = 414 // RFC 9110, 15.5.15
	ResponseCode_RESPONSE_CODE_UNSUPPORTED_MEDIA_TYPE          ResponseCode = 415 // RFC 9110, 15.5.16
	ResponseCode_RESPONSE_CODE_REQUESTED_RANGE_NOT_SATISFIABLE ResponseCode = 416 // RFC 9110, 15.5.17
	ResponseCode_RESPONSE_CODE_EXPECTATION_FAILED              ResponseCode = 417 // RFC 9110, 15.5.18
	ResponseCode_RESPONSE_CODE_TEAPOT                          ResponseCode = 418 // RFC 9110, 15.5.19 (UNUSED)
	ResponseCode_RESPONSE_CODE_MISDIRECTED_REQUEST             ResponseCode = 421 // RFC 9110, 15.5.20
	ResponseCode_RESPONSE_CODE_UNPROCESSABLE_ENTITY            ResponseCode = 422 // RFC 9110, 15.5.21
	ResponseCode_RESPONSE_CODE_LOCKED                          ResponseCode = 423 // RFC 4918, 11.3
	ResponseCode_RESPONSE_CODE_FAILED_DEPENDENCY               ResponseCode = 424 // RFC 4918, 11.4
	ResponseCode_RESPONSE_CODE_TOO_EARLY                       ResponseCode = 425 // RFC 8470, 5.2.
	ResponseCode_RESPONSE_CODE_UPGRADE_REQUIRED                ResponseCode = 426 // RFC 9110, 15.5.22
	ResponseCode_RESPONSE_CODE_PRECONDITION_REQUIRED           ResponseCode = 428 // RFC 6585, 3
	ResponseCode_RESPONSE_CODE_TOO_MANY_REQUESTS               ResponseCode = 429 // RFC 6585, 4
	ResponseCode_RESPONSE_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE ResponseCode = 431 // RFC 6585, 5
	ResponseCode_RESPONSE_CODE_UNAVAILABLE_FOR_LEGAL_REASONS   ResponseCode = 451 // RFC 7725, 3
	ResponseCode_RESPONSE_CODE_INTERNAL_SERVER_ERROR           ResponseCode = 500 // RFC 9110, 15.6.1
	ResponseCode_RESPONSE_CODE_NOT_IMPLEMENTED                 ResponseCode = 501 // RFC 9110, 15.6.2
	ResponseCode_RESPONSE_CODE_BAD_GATEWAY                     ResponseCode = 502 // RFC 9110, 15.6.3
	ResponseCode_RESPONSE_CODE_SERVICE_UNAVAILABLE             ResponseCode = 503 // RFC 9110, 15.6.4
	ResponseCode_RESPONSE_CODE_GATEWAY_TIMEOUT                 ResponseCode = 504 // RFC 9110, 15.6.5
	ResponseCode_RESPONSE_CODE_HTTP_VERSION_NOT_SUPPORTED      ResponseCode = 505 // RFC 9110, 15.6.6
	ResponseCode_RESPONSE_CODE_VARIANT_ALSO_NEGOTIATES         ResponseCode = 506 // RFC 2295, 8.1
	ResponseCode_RESPONSE_CODE_INSUFFICIENT_STORAGE            ResponseCode = 507 // RFC 4918, 11.5
	ResponseCode_RESPONSE_CODE_LOOP_DETECTED                   ResponseCode = 508 // RFC 5842, 7.2
	ResponseCode_RESPONSE_CODE_NOT_EXTENDED                    ResponseCode = 510 // RFC 2774, 7
	ResponseCode_RESPONSE_CODE_NETWORK_AUTHENTICATION_REQUIRED ResponseCode = 511 // RFC 6585, 6
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0:   "RESPONSE_CODE_UNSPECIFIED",
		100: "RESPONSE_CODE_CONTINUE",
		101: "RESPONSE_CODE_SWITCHING_PROTOCOLS",
		102: "RESPONSE_CODE_PROCESSING",
		103: "RESPONSE_CODE_EARLY_HINTS",
		200: "RESPONSE_CODE_OK",
		201: "RESPONSE_CODE_CREATED",
		202: "RESPONSE_CODE_ACCEPTED",
		203: "RESPONSE_CODE_NON_AUTHORITATIVE_INFO",
		204: "RESPONSE_CODE_NO_CONTENT",
		205: "RESPONSE_CODE_RESET_CONTENT",
		206: "RESPONSE_CODE_PARTIAL_CONTENT",
		207: "RESPONSE_CODE_MULTI_STATUS",
		208: "RESPONSE_CODE_ALREADY_REPORTED",
		226: "RESPONSE_CODE_IM_USED",
		300: "RESPONSE_CODE_MULTIPLE_CHOICES",
		301: "RESPONSE_CODE_MOVED_PERMANENTLY",
		302: "RESPONSE_CODE_FOUND",
		303: "RESPONSE_CODE_SEE_OTHER",
		304: "RESPONSE_CODE_NOT_MODIFIED",
		305: "RESPONSE_CODE_USE_PROXY",
		307: "RESPONSE_CODE_TEMPORARY_REDIRECT",
		308: "RESPONSE_CODE_PERMANENT_REDIRECT",
		400: "RESPONSE_CODE_BAD_REQUEST",
		401: "RESPONSE_CODE_UNAUTHORIZED",
		402: "RESPONSE_CODE_PAYMENT_REQUIRED",
		403: "RESPONSE_CODE_FORBIDDEN",
		404: "RESPONSE_CODE_NOT_FOUND",
		405: "RESPONSE_CODE_METHOD_NOT_ALLOWED",
		406: "RESPONSE_CODE_NOT_ACCEPTABLE",
		407: "RESPONSE_CODE_PROXY_AUTH_REQUIRED",
		408: "RESPONSE_CODE_REQUEST_TIMEOUT",
		409: "RESPONSE_CODE_CONFLICT",
		410: "RESPONSE_CODE_GONE",
		411: "RESPONSE_CODE_LENGTH_REQUIRED",
		412: "RESPONSE_CODE_PRECONDITION_FAILED",
		413: "RESPONSE_CODE_REQUEST_ENTITY_TOO_LARGE",
		414: "RESPONSE_CODE_REQUEST_URI_TOO_LONG",
		415: "RESPONSE_CODE_UNSUPPORTED_MEDIA_TYPE",
		416: "RESPONSE_CODE_REQUESTED_RANGE_NOT_SATISFIABLE",
		417: "RESPONSE_CODE_EXPECTATION_FAILED",
		418: "RESPONSE_CODE_TEAPOT",
		421: "RESPONSE_CODE_MISDIRECTED_REQUEST",
		422: "RESPONSE_CODE_UNPROCESSABLE_ENTITY",
		423: "RESPONSE_CODE_LOCKED",
		424: "RESPONSE_CODE_FAILED_DEPENDENCY",
		425: "RESPONSE_CODE_TOO_EARLY",
		426: "RESPONSE_CODE_UPGRADE_REQUIRED",
		428: "RESPONSE_CODE_PRECONDITION_REQUIRED",
		429: "RESPONSE_CODE_TOO_MANY_REQUESTS",
		431: "RESPONSE_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE",
		451: "RESPONSE_CODE_UNAVAILABLE_FOR_LEGAL_REASONS",
		500: "RESPONSE_CODE_INTERNAL_SERVER_ERROR",
		501: "RESPONSE_CODE_NOT_IMPLEMENTED",
		502: "RESPONSE_CODE_BAD_GATEWAY",
		503: "RESPONSE_CODE_SERVICE_UNAVAILABLE",
		504: "RESPONSE_CODE_GATEWAY_TIMEOUT",
		505: "RESPONSE_CODE_HTTP_VERSION_NOT_SUPPORTED",
		506: "RESPONSE_CODE_VARIANT_ALSO_NEGOTIATES",
		507: "RESPONSE_CODE_INSUFFICIENT_STORAGE",
		508: "RESPONSE_CODE_LOOP_DETECTED",
		510: "RESPONSE_CODE_NOT_EXTENDED",
		511: "RESPONSE_CODE_NETWORK_AUTHENTICATION_REQUIRED",
	}
	ResponseCode_value = map[string]int32{
		"RESPONSE_CODE_UNSPECIFIED":                     0,
		"RESPONSE_CODE_CONTINUE":                        100,
		"RESPONSE_CODE_SWITCHING_PROTOCOLS":             101,
		"RESPONSE_CODE_PROCESSING":                      102,
		"RESPONSE_CODE_EARLY_HINTS":                     103,
		"RESPONSE_CODE_OK":                              200,
		"RESPONSE_CODE_CREATED":                         201,
		"RESPONSE_CODE_ACCEPTED":                        202,
		"RESPONSE_CODE_NON_AUTHORITATIVE_INFO":          203,
		"RESPONSE_CODE_NO_CONTENT":                      204,
		"RESPONSE_CODE_RESET_CONTENT":                   205,
		"RESPONSE_CODE_PARTIAL_CONTENT":                 206,
		"RESPONSE_CODE_MULTI_STATUS":                    207,
		"RESPONSE_CODE_ALREADY_REPORTED":                208,
		"RESPONSE_CODE_IM_USED":                         226,
		"RESPONSE_CODE_MULTIPLE_CHOICES":                300,
		"RESPONSE_CODE_MOVED_PERMANENTLY":               301,
		"RESPONSE_CODE_FOUND":                           302,
		"RESPONSE_CODE_SEE_OTHER":                       303,
		"RESPONSE_CODE_NOT_MODIFIED":                    304,
		"RESPONSE_CODE_USE_PROXY":                       305,
		"RESPONSE_CODE_TEMPORARY_REDIRECT":              307,
		"RESPONSE_CODE_PERMANENT_REDIRECT":              308,
		"RESPONSE_CODE_BAD_REQUEST":                     400,
		"RESPONSE_CODE_UNAUTHORIZED":                    401,
		"RESPONSE_CODE_PAYMENT_REQUIRED":                402,
		"RESPONSE_CODE_FORBIDDEN":                       403,
		"RESPONSE_CODE_NOT_FOUND":                       404,
		"RESPONSE_CODE_METHOD_NOT_ALLOWED":              405,
		"RESPONSE_CODE_NOT_ACCEPTABLE":                  406,
		"RESPONSE_CODE_PROXY_AUTH_REQUIRED":             407,
		"RESPONSE_CODE_REQUEST_TIMEOUT":                 408,
		"RESPONSE_CODE_CONFLICT":                        409,
		"RESPONSE_CODE_GONE":                            410,
		"RESPONSE_CODE_LENGTH_REQUIRED":                 411,
		"RESPONSE_CODE_PRECONDITION_FAILED":             412,
		"RESPONSE_CODE_REQUEST_ENTITY_TOO_LARGE":        413,
		"RESPONSE_CODE_REQUEST_URI_TOO_LONG":            414,
		"RESPONSE_CODE_UNSUPPORTED_MEDIA_TYPE":          415,
		"RESPONSE_CODE_REQUESTED_RANGE_NOT_SATISFIABLE": 416,
		"RESPONSE_CODE_EXPECTATION_FAILED":              417,
		"RESPONSE_CODE_TEAPOT":                          418,
		"RESPONSE_CODE_MISDIRECTED_REQUEST":             421,
		"RESPONSE_CODE_UNPROCESSABLE_ENTITY":            422,
		"RESPONSE_CODE_LOCKED":                          423,
		"RESPONSE_CODE_FAILED_DEPENDENCY":               424,
		"RESPONSE_CODE_TOO_EARLY":                       425,
		"RESPONSE_CODE_UPGRADE_REQUIRED":                426,
		"RESPONSE_CODE_PRECONDITION_REQUIRED":           428,
		"RESPONSE_CODE_TOO_MANY_REQUESTS":               429,
		"RESPONSE_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE": 431,
		"RESPONSE_CODE_UNAVAILABLE_FOR_LEGAL_REASONS":   451,
		"RESPONSE_CODE_INTERNAL_SERVER_ERROR":           500,
		"RESPONSE_CODE_NOT_IMPLEMENTED":                 501,
		"RESPONSE_CODE_BAD_GATEWAY":                     502,
		"RESPONSE_CODE_SERVICE_UNAVAILABLE":             503,
		"RESPONSE_CODE_GATEWAY_TIMEOUT":                 504,
		"RESPONSE_CODE_HTTP_VERSION_NOT_SUPPORTED":      505,
		"RESPONSE_CODE_VARIANT_ALSO_NEGOTIATES":         506,
		"RESPONSE_CODE_INSUFFICIENT_STORAGE":            507,
		"RESPONSE_CODE_LOOP_DETECTED":                   508,
		"RESPONSE_CODE_NOT_EXTENDED":                    510,
		"RESPONSE_CODE_NETWORK_AUTHENTICATION_REQUIRED": 511,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_openapi_mikros_openapi_proto_enumTypes[3].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_openapi_mikros_openapi_proto_enumTypes[3]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseCode(num)
	return nil
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{3}
}

// Supported formats of a property.
type PropertyFormat int32

const (
	PropertyFormat_PROPERTY_FORMAT_UNSPECIFIED PropertyFormat = 0
	PropertyFormat_PROPERTY_FORMAT_INT32       PropertyFormat = 1
	PropertyFormat_PROPERTY_FORMAT_INT64       PropertyFormat = 2
	PropertyFormat_PROPERTY_FORMAT_FLOAT       PropertyFormat = 3
	PropertyFormat_PROPERTY_FORMAT_DOUBLE      PropertyFormat = 4
	PropertyFormat_PROPERTY_FORMAT_BYTE        PropertyFormat = 5
	PropertyFormat_PROPERTY_FORMAT_BINARY      PropertyFormat = 6
	PropertyFormat_PROPERTY_FORMAT_DATE        PropertyFormat = 7
	PropertyFormat_PROPERTY_FORMAT_DATE_TIME   PropertyFormat = 8
	PropertyFormat_PROPERTY_FORMAT_PASSWORD    PropertyFormat = 9
	PropertyFormat_PROPERTY_FORMAT_STRING      PropertyFormat = 10
)

// Enum value maps for PropertyFormat.
var (
	PropertyFormat_name = map[int32]string{
		0:  "PROPERTY_FORMAT_UNSPECIFIED",
		1:  "PROPERTY_FORMAT_INT32",
		2:  "PROPERTY_FORMAT_INT64",
		3:  "PROPERTY_FORMAT_FLOAT",
		4:  "PROPERTY_FORMAT_DOUBLE",
		5:  "PROPERTY_FORMAT_BYTE",
		6:  "PROPERTY_FORMAT_BINARY",
		7:  "PROPERTY_FORMAT_DATE",
		8:  "PROPERTY_FORMAT_DATE_TIME",
		9:  "PROPERTY_FORMAT_PASSWORD",
		10: "PROPERTY_FORMAT_STRING",
	}
	PropertyFormat_value = map[string]int32{
		"PROPERTY_FORMAT_UNSPECIFIED": 0,
		"PROPERTY_FORMAT_INT32":       1,
		"PROPERTY_FORMAT_INT64":       2,
		"PROPERTY_FORMAT_FLOAT":       3,
		"PROPERTY_FORMAT_DOUBLE":      4,
		"PROPERTY_FORMAT_BYTE":        5,
		"PROPERTY_FORMAT_BINARY":      6,
		"PROPERTY_FORMAT_DATE":        7,
		"PROPERTY_FORMAT_DATE_TIME":   8,
		"PROPERTY_FORMAT_PASSWORD":    9,
		"PROPERTY_FORMAT_STRING":      10,
	}
)

func (x PropertyFormat) Enum() *PropertyFormat {
	p := new(PropertyFormat)
	*p = x
	return p
}

func (x PropertyFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_openapi_mikros_openapi_proto_enumTypes[4].Descriptor()
}

func (PropertyFormat) Type() protoreflect.EnumType {
	return &file_openapi_mikros_openapi_proto_enumTypes[4]
}

func (x PropertyFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PropertyFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PropertyFormat(num)
	return nil
}

// Deprecated: Use PropertyFormat.Descriptor instead.
func (PropertyFormat) EnumDescriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{4}
}

type PropertyLocation int32

const (
	PropertyLocation_PROPERTY_LOCATION_UNSPECIFIED PropertyLocation = 0
	PropertyLocation_PROPERTY_LOCATION_BODY        PropertyLocation = 1
	PropertyLocation_PROPERTY_LOCATION_QUERY       PropertyLocation = 2
	PropertyLocation_PROPERTY_LOCATION_PATH        PropertyLocation = 3
	PropertyLocation_PROPERTY_LOCATION_HEADER      PropertyLocation = 4
)

// Enum value maps for PropertyLocation.
var (
	PropertyLocation_name = map[int32]string{
		0: "PROPERTY_LOCATION_UNSPECIFIED",
		1: "PROPERTY_LOCATION_BODY",
		2: "PROPERTY_LOCATION_QUERY",
		3: "PROPERTY_LOCATION_PATH",
		4: "PROPERTY_LOCATION_HEADER",
	}
	PropertyLocation_value = map[string]int32{
		"PROPERTY_LOCATION_UNSPECIFIED": 0,
		"PROPERTY_LOCATION_BODY":        1,
		"PROPERTY_LOCATION_QUERY":       2,
		"PROPERTY_LOCATION_PATH":        3,
		"PROPERTY_LOCATION_HEADER":      4,
	}
)

func (x PropertyLocation) Enum() *PropertyLocation {
	p := new(PropertyLocation)
	*p = x
	return p
}

func (x PropertyLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_openapi_mikros_openapi_proto_enumTypes[5].Descriptor()
}

func (PropertyLocation) Type() protoreflect.EnumType {
	return &file_openapi_mikros_openapi_proto_enumTypes[5]
}

func (x PropertyLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PropertyLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PropertyLocation(num)
	return nil
}

// Deprecated: Use PropertyLocation.Descriptor instead.
func (PropertyLocation) EnumDescriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{5}
}

type OpenapiMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *OpenapiInfo     `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Server []*OpenapiServer `protobuf:"bytes,2,rep,name=server" json:"server,omitempty"`
}

func (x *OpenapiMetadata) Reset() {
	*x = OpenapiMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiMetadata) ProtoMessage() {}

func (x *OpenapiMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiMetadata.ProtoReflect.Descriptor instead.
func (*OpenapiMetadata) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{0}
}

func (x *OpenapiMetadata) GetInfo() *OpenapiInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *OpenapiMetadata) GetServer() []*OpenapiServer {
	if x != nil {
		return x.Server
	}
	return nil
}

type OpenapiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       *string `protobuf:"bytes,1,req,name=title" json:"title,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Version     *string `protobuf:"bytes,3,req,name=version" json:"version,omitempty"`
}

func (x *OpenapiInfo) Reset() {
	*x = OpenapiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiInfo) ProtoMessage() {}

func (x *OpenapiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiInfo.ProtoReflect.Descriptor instead.
func (*OpenapiInfo) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{1}
}

func (x *OpenapiInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *OpenapiInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OpenapiInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type OpenapiServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *OpenapiServer) Reset() {
	*x = OpenapiServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiServer) ProtoMessage() {}

func (x *OpenapiServer) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiServer.ProtoReflect.Descriptor instead.
func (*OpenapiServer) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{2}
}

func (x *OpenapiServer) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *OpenapiServer) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type OpenapiServiceSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *OpenapiSecurityType           `protobuf:"varint,1,req,name=type,enum=openapi.OpenapiSecurityType" json:"type,omitempty"`
	Description      *string                        `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Name             *string                        `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	In               *OpenapiSecurityApiKeyLocation `protobuf:"varint,4,opt,name=in,enum=openapi.OpenapiSecurityApiKeyLocation" json:"in,omitempty"`
	Scheme           *OpenapiSecurityScheme         `protobuf:"varint,5,req,name=scheme,enum=openapi.OpenapiSecurityScheme" json:"scheme,omitempty"`
	BearerFormat     *string                        `protobuf:"bytes,6,opt,name=bearer_format,json=bearerFormat" json:"bearer_format,omitempty"`
	Flows            *OpenapiSecurityOauthFlows     `protobuf:"bytes,7,opt,name=flows" json:"flows,omitempty"`
	OpenIdConnectUrl *string                        `protobuf:"bytes,8,opt,name=open_id_connect_url,json=openIdConnectUrl" json:"open_id_connect_url,omitempty"`
}

func (x *OpenapiServiceSecurity) Reset() {
	*x = OpenapiServiceSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiServiceSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiServiceSecurity) ProtoMessage() {}

func (x *OpenapiServiceSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiServiceSecurity.ProtoReflect.Descriptor instead.
func (*OpenapiServiceSecurity) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{3}
}

func (x *OpenapiServiceSecurity) GetType() OpenapiSecurityType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return OpenapiSecurityType_OPENAPI_SECURITY_TYPE_UNSPECIFIED
}

func (x *OpenapiServiceSecurity) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OpenapiServiceSecurity) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OpenapiServiceSecurity) GetIn() OpenapiSecurityApiKeyLocation {
	if x != nil && x.In != nil {
		return *x.In
	}
	return OpenapiSecurityApiKeyLocation_OPENAPI_SECURITY_API_KEY_LOCATION_UNSPECIFIED
}

func (x *OpenapiServiceSecurity) GetScheme() OpenapiSecurityScheme {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return OpenapiSecurityScheme_OPENAPI_SECURITY_SCHEME_UNSPECIFIED
}

func (x *OpenapiServiceSecurity) GetBearerFormat() string {
	if x != nil && x.BearerFormat != nil {
		return *x.BearerFormat
	}
	return ""
}

func (x *OpenapiServiceSecurity) GetFlows() *OpenapiSecurityOauthFlows {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *OpenapiServiceSecurity) GetOpenIdConnectUrl() string {
	if x != nil && x.OpenIdConnectUrl != nil {
		return *x.OpenIdConnectUrl
	}
	return ""
}

type OpenapiSecurityOauthFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Implicit          *OpenapiSecurityOauthFlow `protobuf:"bytes,1,opt,name=implicit" json:"implicit,omitempty"`
	Password          *OpenapiSecurityOauthFlow `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	ClientCredentials *OpenapiSecurityOauthFlow `protobuf:"bytes,3,opt,name=client_credentials,json=clientCredentials" json:"client_credentials,omitempty"`
	AuthorizationCode *OpenapiSecurityOauthFlow `protobuf:"bytes,4,opt,name=authorization_code,json=authorizationCode" json:"authorization_code,omitempty"`
}

func (x *OpenapiSecurityOauthFlows) Reset() {
	*x = OpenapiSecurityOauthFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiSecurityOauthFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiSecurityOauthFlows) ProtoMessage() {}

func (x *OpenapiSecurityOauthFlows) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiSecurityOauthFlows.ProtoReflect.Descriptor instead.
func (*OpenapiSecurityOauthFlows) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{4}
}

func (x *OpenapiSecurityOauthFlows) GetImplicit() *OpenapiSecurityOauthFlow {
	if x != nil {
		return x.Implicit
	}
	return nil
}

func (x *OpenapiSecurityOauthFlows) GetPassword() *OpenapiSecurityOauthFlow {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *OpenapiSecurityOauthFlows) GetClientCredentials() *OpenapiSecurityOauthFlow {
	if x != nil {
		return x.ClientCredentials
	}
	return nil
}

func (x *OpenapiSecurityOauthFlows) GetAuthorizationCode() *OpenapiSecurityOauthFlow {
	if x != nil {
		return x.AuthorizationCode
	}
	return nil
}

type OpenapiSecurityOauthFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationUrl *string           `protobuf:"bytes,1,req,name=authorization_url,json=authorizationUrl" json:"authorization_url,omitempty"`
	TokenUrl         *string           `protobuf:"bytes,2,req,name=token_url,json=tokenUrl" json:"token_url,omitempty"`
	RefreshUrl       *string           `protobuf:"bytes,3,opt,name=refresh_url,json=refreshUrl" json:"refresh_url,omitempty"`
	Scopes           map[string]string `protobuf:"bytes,4,rep,name=scopes" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *OpenapiSecurityOauthFlow) Reset() {
	*x = OpenapiSecurityOauthFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiSecurityOauthFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiSecurityOauthFlow) ProtoMessage() {}

func (x *OpenapiSecurityOauthFlow) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiSecurityOauthFlow.ProtoReflect.Descriptor instead.
func (*OpenapiSecurityOauthFlow) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{5}
}

func (x *OpenapiSecurityOauthFlow) GetAuthorizationUrl() string {
	if x != nil && x.AuthorizationUrl != nil {
		return *x.AuthorizationUrl
	}
	return ""
}

func (x *OpenapiSecurityOauthFlow) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *OpenapiSecurityOauthFlow) GetRefreshUrl() string {
	if x != nil && x.RefreshUrl != nil {
		return *x.RefreshUrl
	}
	return ""
}

func (x *OpenapiSecurityOauthFlow) GetScopes() map[string]string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type OpenapiMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary     *string     `protobuf:"bytes,1,req,name=summary" json:"summary,omitempty"`
	Description *string     `protobuf:"bytes,2,req,name=description" json:"description,omitempty"`
	Tags        []string    `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Response    []*Response `protobuf:"bytes,4,rep,name=response" json:"response,omitempty"`
}

func (x *OpenapiMethod) Reset() {
	*x = OpenapiMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiMethod) ProtoMessage() {}

func (x *OpenapiMethod) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiMethod.ProtoReflect.Descriptor instead.
func (*OpenapiMethod) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{6}
}

func (x *OpenapiMethod) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *OpenapiMethod) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OpenapiMethod) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OpenapiMethod) GetResponse() []*Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        *ResponseCode `protobuf:"varint,1,req,name=code,enum=openapi.ResponseCode" json:"code,omitempty"`
	Description *string       `protobuf:"bytes,2,req,name=description" json:"description,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{7}
}

func (x *Response) GetCode() ResponseCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ResponseCode_RESPONSE_CODE_UNSPECIFIED
}

func (x *Response) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type OpenapiMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Operation `protobuf:"bytes,1,req,name=operation" json:"operation,omitempty"`
}

func (x *OpenapiMessage) Reset() {
	*x = OpenapiMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenapiMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenapiMessage) ProtoMessage() {}

func (x *OpenapiMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenapiMessage.ProtoReflect.Descriptor instead.
func (*OpenapiMessage) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{8}
}

func (x *OpenapiMessage) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestBody *RequestBody `protobuf:"bytes,1,req,name=request_body,json=requestBody" json:"request_body,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{9}
}

func (x *Operation) GetRequestBody() *RequestBody {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

type RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string `protobuf:"bytes,1,req,name=description" json:"description,omitempty"`
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{10}
}

func (x *RequestBody) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string           `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Example     *string           `protobuf:"bytes,2,opt,name=example" json:"example,omitempty"`
	Format      *PropertyFormat   `protobuf:"varint,3,opt,name=format,enum=openapi.PropertyFormat" json:"format,omitempty"`
	Required    *bool             `protobuf:"varint,4,opt,name=required" json:"required,omitempty"`
	Location    *PropertyLocation `protobuf:"varint,5,opt,name=location,enum=openapi.PropertyLocation" json:"location,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openapi_mikros_openapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_openapi_mikros_openapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_openapi_mikros_openapi_proto_rawDescGZIP(), []int{11}
}

func (x *Property) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Property) GetExample() string {
	if x != nil && x.Example != nil {
		return *x.Example
	}
	return ""
}

func (x *Property) GetFormat() PropertyFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return PropertyFormat_PROPERTY_FORMAT_UNSPECIFIED
}

func (x *Property) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *Property) GetLocation() PropertyLocation {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return PropertyLocation_PROPERTY_LOCATION_UNSPECIFIED
}

var file_openapi_mikros_openapi_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*OpenapiMetadata)(nil),
		Field:         86041,
		Name:          "openapi.metadata",
		Tag:           "bytes,86041,opt,name=metadata",
		Filename:      "openapi/mikros_openapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: ([]*OpenapiServiceSecurity)(nil),
		Field:         86041,
		Name:          "openapi.security",
		Tag:           "bytes,86041,rep,name=security",
		Filename:      "openapi/mikros_openapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*OpenapiMethod)(nil),
		Field:         86041,
		Name:          "openapi.operation",
		Tag:           "bytes,86041,opt,name=operation",
		Filename:      "openapi/mikros_openapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*OpenapiMessage)(nil),
		Field:         86041,
		Name:          "openapi.message",
		Tag:           "bytes,86041,opt,name=message",
		Filename:      "openapi/mikros_openapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Property)(nil),
		Field:         86041,
		Name:          "openapi.property",
		Tag:           "bytes,86041,opt,name=property",
		Filename:      "openapi/mikros_openapi.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional openapi.OpenapiMetadata metadata = 86041;
	E_Metadata = &file_openapi_mikros_openapi_proto_extTypes[0]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// repeated openapi.OpenapiServiceSecurity security = 86041;
	E_Security = &file_openapi_mikros_openapi_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional openapi.OpenapiMethod operation = 86041;
	E_Operation = &file_openapi_mikros_openapi_proto_extTypes[2]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional openapi.OpenapiMessage message = 86041;
	E_Message = &file_openapi_mikros_openapi_proto_extTypes[3]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional openapi.Property property = 86041;
	E_Property = &file_openapi_mikros_openapi_proto_extTypes[4]
)

var File_openapi_mikros_openapi_proto protoreflect.FileDescriptor

var file_openapi_mikros_openapi_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x02, 0x0a,
	0x16, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x61, 0x75,
	0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2d,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xbd, 0x02,
	0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x02,
	0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x42, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xcc, 0x01, 0x0a, 0x13, 0x4f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e,
	0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x04, 0x2a, 0xdb, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50,
	0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a,
	0x27, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50,
	0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e,
	0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4f, 0x4b, 0x49, 0x45, 0x10, 0x03, 0x2a, 0xce, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45,
	0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54,
	0x48, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x44,
	0x49, 0x47, 0x45, 0x53, 0x54, 0x10, 0x04, 0x2a, 0xf0, 0x11, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x45, 0x10, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f,
	0x48, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0xca, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0xcb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xcc,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0xcd, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0xce, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xcf, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0xe2, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x53, 0x10, 0xac, 0x02, 0x12, 0x24,
	0x0a, 0x1f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x4c,
	0x59, 0x10, 0xad, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xae, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x45, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xaf, 0x02, 0x12, 0x1f, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0xb1, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0xb3, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xb4, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x92, 0x03, 0x12,
	0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x93, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x94, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x95, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x96, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x97, 0x03, 0x12, 0x22, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x98,
	0x03, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x99, 0x03, 0x12, 0x17,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x4f, 0x4e, 0x45, 0x10, 0x9a, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x9b, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x9c, 0x03, 0x12, 0x2b, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x9d, 0x03,
	0x12, 0x27, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x52, 0x49, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x9e, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x9f, 0x03, 0x12, 0x32, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa0, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa1, 0x03, 0x12,
	0x19, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x50, 0x4f, 0x54, 0x10, 0xa2, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0xa5, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0xa6, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0xa7, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44,
	0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10, 0xa8, 0x03, 0x12, 0x1c, 0x0a, 0x17,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0xa9, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xaa, 0x03, 0x12,
	0x28, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xac, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0xad, 0x03, 0x12,
	0x32, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x10, 0xaf, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x53, 0x10, 0xc3, 0x03, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12,
	0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0xf5, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x10, 0xf6, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf7, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xf8, 0x03, 0x12,
	0x2d, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xf9, 0x03, 0x12, 0x2a,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x53, 0x4f, 0x5f, 0x4e, 0x45, 0x47,
	0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x53, 0x10, 0xfa, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x10, 0xfb, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0xfc, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0xfe, 0x03, 0x12, 0x32, 0x0a, 0x2d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xff, 0x03, 0x2a, 0xc7, 0x02, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x36, 0x34, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x2a, 0xa8, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x3a,
	0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x99, 0xa0, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5e, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x99, 0xa0, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x56, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x99, 0xa0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x54, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x99, 0xa0, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x3a, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x99,
	0xa0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x3b, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
}

var (
	file_openapi_mikros_openapi_proto_rawDescOnce sync.Once
	file_openapi_mikros_openapi_proto_rawDescData = file_openapi_mikros_openapi_proto_rawDesc
)

func file_openapi_mikros_openapi_proto_rawDescGZIP() []byte {
	file_openapi_mikros_openapi_proto_rawDescOnce.Do(func() {
		file_openapi_mikros_openapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_openapi_mikros_openapi_proto_rawDescData)
	})
	return file_openapi_mikros_openapi_proto_rawDescData
}

var file_openapi_mikros_openapi_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_openapi_mikros_openapi_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_openapi_mikros_openapi_proto_goTypes = []interface{}{
	(OpenapiSecurityType)(0),            // 0: openapi.OpenapiSecurityType
	(OpenapiSecurityApiKeyLocation)(0),  // 1: openapi.OpenapiSecurityApiKeyLocation
	(OpenapiSecurityScheme)(0),          // 2: openapi.OpenapiSecurityScheme
	(ResponseCode)(0),                   // 3: openapi.ResponseCode
	(PropertyFormat)(0),                 // 4: openapi.PropertyFormat
	(PropertyLocation)(0),               // 5: openapi.PropertyLocation
	(*OpenapiMetadata)(nil),             // 6: openapi.OpenapiMetadata
	(*OpenapiInfo)(nil),                 // 7: openapi.OpenapiInfo
	(*OpenapiServer)(nil),               // 8: openapi.OpenapiServer
	(*OpenapiServiceSecurity)(nil),      // 9: openapi.OpenapiServiceSecurity
	(*OpenapiSecurityOauthFlows)(nil),   // 10: openapi.OpenapiSecurityOauthFlows
	(*OpenapiSecurityOauthFlow)(nil),    // 11: openapi.OpenapiSecurityOauthFlow
	(*OpenapiMethod)(nil),               // 12: openapi.OpenapiMethod
	(*Response)(nil),                    // 13: openapi.Response
	(*OpenapiMessage)(nil),              // 14: openapi.OpenapiMessage
	(*Operation)(nil),                   // 15: openapi.Operation
	(*RequestBody)(nil),                 // 16: openapi.RequestBody
	(*Property)(nil),                    // 17: openapi.Property
	nil,                                 // 18: openapi.OpenapiSecurityOauthFlow.ScopesEntry
	(*descriptorpb.FileOptions)(nil),    // 19: google.protobuf.FileOptions
	(*descriptorpb.ServiceOptions)(nil), // 20: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),  // 21: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil), // 22: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 23: google.protobuf.FieldOptions
}
var file_openapi_mikros_openapi_proto_depIdxs = []int32{
	7,  // 0: openapi.OpenapiMetadata.info:type_name -> openapi.OpenapiInfo
	8,  // 1: openapi.OpenapiMetadata.server:type_name -> openapi.OpenapiServer
	0,  // 2: openapi.OpenapiServiceSecurity.type:type_name -> openapi.OpenapiSecurityType
	1,  // 3: openapi.OpenapiServiceSecurity.in:type_name -> openapi.OpenapiSecurityApiKeyLocation
	2,  // 4: openapi.OpenapiServiceSecurity.scheme:type_name -> openapi.OpenapiSecurityScheme
	10, // 5: openapi.OpenapiServiceSecurity.flows:type_name -> openapi.OpenapiSecurityOauthFlows
	11, // 6: openapi.OpenapiSecurityOauthFlows.implicit:type_name -> openapi.OpenapiSecurityOauthFlow
	11, // 7: openapi.OpenapiSecurityOauthFlows.password:type_name -> openapi.OpenapiSecurityOauthFlow
	11, // 8: openapi.OpenapiSecurityOauthFlows.client_credentials:type_name -> openapi.OpenapiSecurityOauthFlow
	11, // 9: openapi.OpenapiSecurityOauthFlows.authorization_code:type_name -> openapi.OpenapiSecurityOauthFlow
	18, // 10: openapi.OpenapiSecurityOauthFlow.scopes:type_name -> openapi.OpenapiSecurityOauthFlow.ScopesEntry
	13, // 11: openapi.OpenapiMethod.response:type_name -> openapi.Response
	3,  // 12: openapi.Response.code:type_name -> openapi.ResponseCode
	15, // 13: openapi.OpenapiMessage.operation:type_name -> openapi.Operation
	16, // 14: openapi.Operation.request_body:type_name -> openapi.RequestBody
	4,  // 15: openapi.Property.format:type_name -> openapi.PropertyFormat
	5,  // 16: openapi.Property.location:type_name -> openapi.PropertyLocation
	19, // 17: openapi.metadata:extendee -> google.protobuf.FileOptions
	20, // 18: openapi.security:extendee -> google.protobuf.ServiceOptions
	21, // 19: openapi.operation:extendee -> google.protobuf.MethodOptions
	22, // 20: openapi.message:extendee -> google.protobuf.MessageOptions
	23, // 21: openapi.property:extendee -> google.protobuf.FieldOptions
	6,  // 22: openapi.metadata:type_name -> openapi.OpenapiMetadata
	9,  // 23: openapi.security:type_name -> openapi.OpenapiServiceSecurity
	12, // 24: openapi.operation:type_name -> openapi.OpenapiMethod
	14, // 25: openapi.message:type_name -> openapi.OpenapiMessage
	17, // 26: openapi.property:type_name -> openapi.Property
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	22, // [22:27] is the sub-list for extension type_name
	17, // [17:22] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_openapi_mikros_openapi_proto_init() }
func file_openapi_mikros_openapi_proto_init() {
	if File_openapi_mikros_openapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openapi_mikros_openapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiServiceSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiSecurityOauthFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiSecurityOauthFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenapiMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openapi_mikros_openapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openapi_mikros_openapi_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   13,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_openapi_mikros_openapi_proto_goTypes,
		DependencyIndexes: file_openapi_mikros_openapi_proto_depIdxs,
		EnumInfos:         file_openapi_mikros_openapi_proto_enumTypes,
		MessageInfos:      file_openapi_mikros_openapi_proto_msgTypes,
		ExtensionInfos:    file_openapi_mikros_openapi_proto_extTypes,
	}.Build()
	File_openapi_mikros_openapi_proto = out.File
	file_openapi_mikros_openapi_proto_rawDesc = nil
	file_openapi_mikros_openapi_proto_goTypes = nil
	file_openapi_mikros_openapi_proto_depIdxs = nil
}
